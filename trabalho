"use client";
import type React from "react";
import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Play, Square, RefreshCw, ArrowRight } from "lucide-react";
// Dados iniciais para a demonstração de regressão linear
const initialData = [
{ x: 1, y: 2 },
{ x: 2, y: 3 },
{ x: 3, y: 5 },
{ x: 4, y: 4 },
{ x: 5, y: 6 }
];
export default function MachineLearningTutorial() {
const [activeTab, setActiveTab] = useState("intro");
const [training, setTraining] = useState(false);
const [model, setModel] = useState({ w: 0, b: 0 });
const [data, setData] = useState(initialData);
const [prediction, setPrediction] = useState<number | null>(null);
const [inputValue, setInputValue] = useState("");
const canvasRef = useRef<HTMLCanvasElement>(null);
const trainModel = () => {
setTraining(true);
setTimeout(() => {
const n = data.length;
const xSum = data.reduce((sum, point) => sum + point.x, 0);
const ySum = data.reduce((sum, point) => sum + point.y, 0);
const xySum = data.reduce((sum, point) => sum + point.x * point.y, 0);
const xSquaredSum = data.reduce((sum, point) => sum + point.x * point.x, 0);
const w = (n * xySum - xSum * ySum) / (n * xSquaredSum - xSum * xSum);
const b = (ySum - w * xSum) / n;
setModel({ w, b });
setTraining(false);
drawRegressionLine(w, b);
}, 1500);
};
const drawRegressionLine = (w: number, b: number) => {

const canvas = canvasRef.current;
if (!canvas) return;
const ctx = canvas.getContext("2d");
if (!ctx) return;
ctx.clearRect(0, 0, canvas.width, canvas.height);
const padding = 40;
const xMax = Math.max(...data.map(p => p.x)) + 1;
const yMax = Math.max(...data.map(p => p.y)) + 1;
const xScale = (canvas.width - 2 * padding) / xMax;
const yScale = (canvas.height - 2 * padding) / yMax;
ctx.beginPath();
ctx.strokeStyle = "#ccc";
ctx.lineWidth = 1;
ctx.moveTo(padding, padding);
ctx.lineTo(padding, canvas.height - padding);
ctx.lineTo(canvas.width - padding, canvas.height - padding);
ctx.stroke();
ctx.fillStyle = "#3b82f6";
data.forEach(point => {
ctx.beginPath();
ctx.arc(
padding + point.x * xScale,
canvas.height - padding - point.y * yScale,
5, 0, Math.PI * 2
);
ctx.fill();
});
ctx.beginPath();
ctx.strokeStyle = "#ef4444";
ctx.lineWidth = 2;
const y1 = w * 0 + b;
const y2 = w * xMax + b;
ctx.moveTo(padding, canvas.height - padding - y1 * yScale);
ctx.lineTo(padding + xMax * xScale, canvas.height - padding - y2 * yScale);
ctx.stroke();
ctx.fillStyle = "#000";
ctx.font = "12px Arial";

ctx.fillText("x", canvas.width - 20, canvas.height - padding + 20);
ctx.fillText("y", padding - 20, 20);
};
const predict = () => {
const x = parseFloat(inputValue);
if (isNaN(x)) return;
const y = model.w * x + model.b;
setPrediction(y);
const canvas = canvasRef.current;
if (!canvas) return;
const ctx = canvas.getContext("2d");
if (!ctx) return;
const padding = 40;
const xMax = Math.max(...data.map(p => p.x), x) + 1;
const yMax = Math.max(...data.map(p => p.y), y) + 1;
const xScale = (canvas.width - 2 * padding) / xMax;
const yScale = (canvas.height - 2 * padding) / yMax;
ctx.fillStyle = "#10b981";
ctx.beginPath();
ctx.arc(
padding + x * xScale,
canvas.height - padding - y * yScale,
7, 0, Math.PI * 2
);
ctx.fill();
ctx.fillStyle = "#10b981";
ctx.font = "bold 12px Arial";
ctx.fillText(
`Previsão: (${x}, ${y.toFixed(2)})`,
padding + x * xScale + 10,
canvas.height - padding - y * yScale - 10
);
};
const resetDemo = () => {
setData(initialData);
setModel({ w: 0, b: 0 });

setPrediction(null);
setInputValue("");
const canvas = canvasRef.current;
if (!canvas) return;
const ctx = canvas.getContext("2d");
if (!ctx) return;
ctx.clearRect(0, 0, canvas.width, canvas.height);
};
useEffect(() => {
if (activeTab === "regression") {
drawRegressionLine(model.w, model.b);
}
}, [activeTab, model]);
return (
<div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100
py-8 px-4">
<div className="max-w-5xl mx-auto">
<header className="text-center mb-12">
<h1 className="text-4xl font-bold text-gray-800 mb-4">
Fundamentos de Machine Learning
</h1>
<p className="text-lg text-gray-600 max-w-2xl mx-auto">
Explore os conceitos básicos de aprendizado de máquina com exemplos
interativos
</p>
</header>
<nav className="flex flex-wrap justify-center gap-2 mb-8">
<Button variant={activeTab === "intro" ? "default" : "outline"} onClick={() =>
setActiveTab("intro")}>Introdução</Button>
<Button variant={activeTab === "types" ? "default" : "outline"} onClick={() =>
setActiveTab("types")}>Tipos de Aprendizado</Button>
<Button variant={activeTab === "ia-types" ? "default" : "outline"} onClick={()
=> setActiveTab("ia-types")}>Tipos de IA</Button>
<Button variant={activeTab === "libs" ? "default" : "outline"} onClick={() =>
setActiveTab("libs")}>Bibliotecas Python</Button>
<Button variant={activeTab === "vision" ? "default" : "outline"} onClick={() =>
setActiveTab("vision")}>OpenCV / Yolo / MediaPipe</Button>
<Button variant={activeTab === "regression" ? "default" : "outline"} onClick={()
=> setActiveTab("regression")}>Regressão Linear</Button>

</nav>
<main className="bg-white rounded-xl shadow-md p-6">
{activeTab === "intro" && (
<div className="space-y-6">
<h2 className="text-2xl font-bold text-gray-800 mb-4">
Introdução ao Machine Learning
</h2>
<p className="text-gray-700">
Machine Learning é um subcampo da inteligência artificial que se
concentra no desenvolvimento de sistemas que podem aprender com dados,
identificar padrões e tomar decisões com intervenção humana mínima.
</p>
<img src="https://placehold.co/800x400" alt="Representação visual de
machine learning" className="rounded-lg mx-auto my-6" />
<p className="text-gray-700">
Neste site, exploraremos conceitos fundamentais do Machine Learning,
incluindo tipos de aprendizado, modelos, hiperparâmetros e uma demonstração
prática de regressão linear.
</p>
</div>
)}
{activeTab === "types" && (
<div className="space-y-6">
<h2 className="text-2xl font-bold text-gray-800 mb-4">
Tipos de Aprendizado de Máquina
</h2>
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
<Card className="bg-blue-50">
<CardHeader><CardTitle>Aprendizado Supervisionado</CardTitle></
CardHeader>
<CardContent>
<p className="text-gray-700">Usa dados rotulados para treinar
modelos que aprendem a prever saídas para novas entradas.</p>
</CardContent>
</Card>
<Card className="bg-blue-50">
<CardHeader><CardTitle>Aprendizado Não Supervisionado</CardTitle></
CardHeader>
<CardContent>
<p className="text-gray-700">Identifica padrões ou agrupamentos em
dados não rotulados.</p>
</CardContent>
</Card>

<Card className="bg-blue-50">
<CardHeader><CardTitle>Aprendizado por Reforço</CardTitle></
CardHeader>
<CardContent>
<p className="text-gray-700">Agentes aprendem por tentativa e erro
com base em recompensas.</p>
</CardContent>
</Card>
</div>
</div>
)}
{activeTab === "ia-types" && (
<div className="space-y-6">
<h2 className="text-2xl font-bold text-gray-800 mb-4">Tipos de
Inteligência Artificial</h2>
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
<Card className="bg-green-50">
<CardHeader><CardTitle>IA Generativa</CardTitle></CardHeader>
<CardContent>
<p className="text-gray-700">Modelos que criam novos conteúdos
(texto, imagens, áudio) a partir de exemplos existentes.</p>
</CardContent>
</Card>
<Card className="bg-green-50">
<CardHeader><CardTitle>LLMs (Large Language Models)</CardTitle></
CardHeader>
<CardContent>
<p className="text-gray-700">Modelos de linguagem de grande porte,
como GPT, que entendem e geram texto natural.</p>
</CardContent>
</Card>
<Card className="bg-green-50">
<CardHeader><CardTitle>Visão Computacional</CardTitle></
CardHeader>
<CardContent>
<p className="text-gray-700">Permite que computadores interpretem
e processem imagens e vídeos para reconhecer padrões.</p>
</CardContent>
</Card>
</div>
</div>
)}
{activeTab === "libs" && (

<div className="space-y-6">
<h2 className="text-2xl font-bold text-gray-800 mb-4">Bibliotecas
Python para IA</h2>
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
<Card className="bg-purple-50">
<CardHeader><CardTitle>Keras</CardTitle></CardHeader>
<CardContent>
<p className="text-gray-700">Biblioteca de alto nível para criar redes
neurais. Ideal para protótipos rápidos e projetos de deep learning.</p>
</CardContent>
</Card>
<Card className="bg-purple-50">
<CardHeader><CardTitle>PyTorch</CardTitle></CardHeader>
<CardContent>
<p className="text-gray-700">Framework flexível e poderoso para
deep learning, usado em pesquisa e produção.</p>
</CardContent>
</Card>
<Card className="bg-purple-50">
<CardHeader><CardTitle>Scikit-Learn</CardTitle></CardHeader>
<CardContent>
<p className="text-gray-700">Excelente para algoritmos clássicos de
Machine Learning (regressão, classificação, clustering).</p>
</CardContent>
</Card>
</div>
</div>
)}
{activeTab === "vision" && (
<div className="space-y-6">
<h2 className="text-2xl font-bold text-gray-800 mb-4">OpenCV, YOLO e
MediaPipe</h2>
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
<Card className="bg-yellow-50">
<CardHeader><CardTitle>OpenCV</CardTitle></CardHeader>
<CardContent>
<p className="text-gray-700">Biblioteca para processamento de
imagens e visão computacional. Permite manipular imagens, detectar bordas, rostos
e objetos.</p>
</CardContent>
</Card>
<Card className="bg-yellow-50">
<CardHeader><CardTitle>YOLO</CardTitle></CardHeader>
<CardContent>

<p className="text-gray-700">Modelo de detecção de objetos em
tempo real. Ideal para identificar múltiplos objetos em imagens e vídeos.</p>
</CardContent>
</Card>
<Card className="bg-yellow-50">
<CardHeader><CardTitle>MediaPipe</CardTitle></CardHeader>
<CardContent>
<p className="text-gray-700">Framework do Google para soluções de
visão e multimídia, como rastreamento de mãos, rosto e corpo em tempo real.</p>
</CardContent>
</Card>
</div>
</div>
)}
{activeTab === "regression" && (
<div className="space-y-6">
<h2 className="text-2xl font-bold text-gray-800 mb-4">Demonstração de
Regressão Linear</h2>
<div className="flex flex-col md:flex-row gap-4">
<canvas ref={canvasRef} width={500} height={400} className="border
rounded-lg bg-gray-50" />
<div className="flex flex-col gap-4">
<Button onClick={trainModel} disabled={training}>{training ?
"Treinando..." : "Treinar Modelo"}</Button>
<input type="number" placeholder="Digite um valor X"
value={inputValue} onChange={e => setInputValue(e.target.value)}
className="border rounded p-2" />
<Button onClick={predict}>Prever</Button>
<Button onClick={resetDemo} variant="outline">Resetar</Button>

{prediction !== null && <p className="text-green-600 font-
semibold">Previsão Y: {prediction.toFixed(2)}</p>}

</div>
</div>
</div>
)}
</main>
</div>
</div>
);
}
